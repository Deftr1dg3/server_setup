# First needs perform next steps:

# For port forwarding needs to enable options
# in /etc/ssh/sshd_config:

# For "ssh -R":
# GatewayPorts yes

# Use forwarding to all interfaces and UFW to 
# block access from outside 

# ssh -R 0.0.0.0:8000:localhost:80 www@ip_address -N -C -q -f


# Allow Forwarding in UFW Configuration

# Edit /etc/default/ufw:

#     sudo vim /etc/default/ufw

# Find the line DEFAULT_FORWARD_POLICY and set it to ACCEPT:

#     DEFAULT_FORWARD_POLICY="ACCEPT"

# Save and exit.

# ### Confirm IP forwarding is enabled at the kernel level

# Make sure:

#     sudo sysctl net.ipv4.ip_forward

# shows net.ipv4.ip_forward=1. If not, edit /etc/sysctl.conf or a file in /etc/sysctl.d/ to set:

#     net.ipv4.ip_forward=1

# ### Set UFW rules to allow dfault docker network namespaces
# check for your case

# docekr inspect <CONTAINER_NAME> | grep -A 30 Networks

#     sudo ufw allow proto tcp from 172.18.0.0/16 to any port 8000

#     sudo ufw allow proto tcp from 172.17.0.0/16 to any port 8000

# to accept forwarding from docekr bridge networks.



# Main Nginx configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

# HTTP block where your server configurations will reside
http {
    # Log format and access log settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/example_access.log main;
    error_log /var/log/nginx/error.log warn;

    # Server block for HTTPS
    server {
        listen 443 ssl;
	    http2 on;
        server_name git.sethlab.net;

        ssl_certificate /etc/nginx/cert/fullchain.pem;
        ssl_certificate_key /etc/nginx/cert/privkey.pem;

        # Optional: Include intermediate certificate
        # ssl_trusted_certificate /etc/nginx/ssl/intermediate.crt;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Optional: Enable SSL session caching for improved performance
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Root location or proxy pass to your application
        location / {
            # serve static files or proxy pass to your backend
            # For example, if you have a backend server:
        
        # if network_mode: "host" enabled in docker-compose.yml
        # you have access to the host machine network namespace and
        # can direct trafic straight to the 127.0.0.1 of the host machine
        # THIS OPTIONIS NOT SECURED
	    #proxy_pass http://127.0.0.1:8000;

	    proxy_pass http://host.docker.internal:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Or, if serving static files, specify the root:
		#root /usr/share/nginx/html;
		#index index.html;
        }
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
	server_name git.sethlab.net;

        location / {
            return 301 https://$host$request_uri;
        }
    }


    # Server block for HTTPS
    server {
        listen 443 ssl;
        http2 on;
        server_name sethlab.net www.sethlab.net;

        ssl_certificate /etc/nginx/cert/fullchain.pem;
        ssl_certificate_key /etc/nginx/cert/privkey.pem;

        # Optional: Include intermediate certificate
        # ssl_trusted_certificate /etc/nginx/ssl/intermediate.crt;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Optional: Enable SSL session caching for improved performance
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;


	location /data/ {
	    root /usr/share/nginx/html;
	    #autoindex on;
	}

        # Root location or proxy pass to your application
        location / {
            # Or, if serving static files, specify the root:
             root /usr/share/nginx/html;
             index index.html;
        }
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name sethlab.net www.sethlab.net;

        location / {
            return 301 https://$host$request_uri;
        }
    }
    # Handelling all other names.
    # like ip address
    server {
        listen 80;
        server_name example.com;

        # Usually just redirect to HTTPS:
        return 301 https://sethlab.net$request_uri;
    }

    server {
        listen 443 ssl default_server;
        http2 on;
        # ALL OTHER NAMES
        server_name _;

        ssl_certificate /etc/nginx/cert/fullchain.pem;
        ssl_certificate_key /etc/nginx/cert/privkey.pem;

        # Optional: Include intermediate certificate
        # ssl_trusted_certificate /etc/nginx/ssl/intermediate.crt;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Optional: Enable SSL session caching for improved performance
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        return 301 https://sethlab.net$request_uri;
    }
}
